
package TermProject;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.util.Random;

import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;

import java.awt.color.*; 

import javax.swing.colorchooser.*;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

public class MovingBallMachine extends JPanel implements ActionListener, ItemListener{
	
	private int x,y, radius,layoutX, layoutY, speedX, speedY, locationX, locationY;
	private JButton start, stop, up, down, right, left, colour;
	private JRadioButton rl, ud, rn, sc, bc; 
	private ButtonGroup directionG, colorG;
	private JCheckBox am;
	private Color ballColor, screenColor, panelColor, color;
	private JPanel panel, directionPanel, radioPanel;
	private Thread t;
	private JMenuBar menubar;
	private JMenu help, file;
	private JMenuItem about, speed, quit;
	
	
	// MovingBallMachine constructure contains button panel and area for moves of ball
	public MovingBallMachine(){
		 
		 speedX=5;  // speedX gives the distance of movement in vertical line for each action 
		 speedY=5;  // speedY gives the distance of movement in horizontal line for each action  
		 locationX=x+radius;  // locationX gives the location of center of ball in x line on the screen
		 locationY=y+radius;  // locationY gives the location of center of ball in y line on the screen
		 
		 
		 x=200;  //start location on x plane of ball 
		 y=200;  //start location on y plane of ball 
		 radius=100;  //radius of ball
		 layoutX=980;  //length of panel on x plane
		 layoutY=700;   //length of panel on y plane
		 setLayout(null);
		 
	     
		 screenColor=new Color(100, 100, 100);  //initial color of ball
	     ballColor=new Color(100, 200, 200);  //initial color of screen
	     panelColor=new Color(200, 100, 100);   //initial color of panel
	     setBackground(screenColor);
	    
	     
	     //Features of panel 
	     panel=new JPanel();
	     panel.setLayout(null);
	     panel.setLocation(0,500);
	     panel.setSize(1000, 200);
	     panel.setBackground(panelColor);
	     panel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
	     add(panel);
	     
	     //Menu bar
	     menubar=new JMenuBar();
	     menubar.setSize(1000, 25);
	     menubar.setLocation(0	, 0);
	     menubar.setBackground(new Color(150, 150, 150));
	     add(menubar);
	    
	     
	     file= new JMenu("File");
	     file.setBackground(new Color(150, 150, 150));
	     menubar.add(file);
	     
	     
	     quit=new JMenuItem("Quit");
	     file.add(quit);
	     quit.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				System.exit(0);
			
			}
		});
	   
	     
	     help=new JMenu("Help");
	     help.setBackground(new Color(150, 150, 150));
	     menubar.add(help);
	     
	     about=new JMenuItem("About The MovingBallMachine");
	     help.add(about);
	     about.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
                
				Object [] arr={"Close"};
				
				int n=JOptionPane.showOptionDialog(null, "Hello Earthlings! You are playing the MovingBallMachine game. "+"\n"
				        +"If you didn't understand how to play, please read the following carefully:"+"\n"
						+"Four buttons on the left handside for moving the ball 5 pixels at each time."+"\n"
				        +"If you want it to mave continuously than after choosing 'AM' pick one of the  "+"\n"
						+"radio buttons RL, UD, RN and press 'Start' button,if you try another one press "+"\n"
				        +"'Stop' to start over again. You can also change the color of ball and screen: " +"\n"
						+"Select SC or BC and choose a color from color panel on 'Color' button."+"\n"+"\n"
				        +"Have Fun!", "MovingBallMachine",JOptionPane.CLOSED_OPTION, JOptionPane.INFORMATION_MESSAGE,null, arr, arr[0]);
				
					
			}
		});
	     
	    
	     
	     //Up button to move the ball upward  
	     up=new JButton("up");
	     up.setSize(50, 50);
	     up.setLocation(55, 5);
	     up.addActionListener(this); 
			
	     //Down button to move the ball downward
	     down=new JButton("down");
	     down.setSize(50, 50);
	     down.setLocation(55, 105);
	     down.addActionListener(this);
	     
	     //Left button to move the ball leftward
	     left=new JButton("left");
	     left.setSize(50, 50);
	     left.setLocation(5, 55);
	     left.addActionListener(this);
	     
	     //Right button to move the ball rightward
	     right=new JButton("right");
	     right.setSize(50, 50);
	     right.setLocation(105, 55);
	     right.addActionListener(this);
	     
	     //RadioPanel will include 5 radio button and 1 checker box. Created not to write location for each 6 button
	     radioPanel=new JPanel();
	     radioPanel.setLayout(new GridLayout(1,6));
	     radioPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
	     radioPanel.setLocation(165,0);
	     radioPanel.setSize(500, 160);
	     radioPanel.setBackground(panelColor);
	     
         //rl radio button moves the ball continuously from right to left 
	     rl=new JRadioButton("RL");
         radioPanel.add(rl);
 	     
         //ud radio button moves the ball continuously between up and down 
	     ud=new JRadioButton("UD");
	     radioPanel.add(ud);
	     
	     //rn radio button moves the ball random
	     rn=new JRadioButton("RN");
	     radioPanel.add(rn);
	     	     
	     directionG=new ButtonGroup(); //button group of 3 continuous movement buttons
	     directionG.add(rl);
	     directionG.add(ud);
	     directionG.add(rn);
	     
	     am=new JCheckBox("AM"); // am check box is for choosing direction buttons or radio buttons 
	     radioPanel.add(am);
	     am.addItemListener(this);
	     setRadiosAble(false);
	 	
	    
         //sc and bc are radio buttons to choose if you want to change ball color or screen color
	     sc=new JRadioButton("SC");
//	     ImageIcon scIcon=new ImageIcon("/Users/fggi/Desktop/benimkiler/1.jpg");
//	     sc.setIcon(scIcon);
	     radioPanel.add(sc);
	     
	     bc=new JRadioButton("BC");
	     radioPanel.add(bc);
	     
	     colorG=new ButtonGroup();
	     colorG.add(sc);
	     colorG.add(bc);
	     
	     //'colour' is the button of color chooser panel
	     colour=new JButton("Color");
	     colour.setSize(80, 80);
	     colour.setLocation(680, 40);
	     colour.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				color= JColorChooser.showDialog(null, "select a color", ballColor);
				if(sc.isSelected()){
					setBackground(color);
				}
				else if(bc.isSelected()){
					ballColor=color;
					repaint();
				}
			}
		});
	    
	     //start button starts the movements according to chosen radio button 
	     start=new JButton("Start");
		 start.setSize(80, 80);
		 start.setLocation(780, 40);
	     start.addActionListener(this);	     
	     start.setEnabled(false); 
	   
	     //stop button stops the existing movement 
	     stop=new JButton("Stop");
	     stop.setSize(80, 80);
	     stop.setLocation(880, 40);
	     stop.addActionListener(this);
	     
	     
	     panel.add(up);
	     panel.add(down);
	     panel.add(left);
	     panel.add(right);
	     panel.add(radioPanel);
	     panel.add(colour);
	     panel.add(start);
	     panel.add(stop);

	     
	 
	     
	}
	//METHODS
	public void paint(Graphics g){
		super.paint(g);
		Graphics2D g2d= (Graphics2D ) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setColor(ballColor);
		g2d.fillOval(x, y, radius , radius);
	}
	
	
   //COLOR CHANGE METHODS
	/*public void changeColor(){
		Random r=new Random();
		ballColor=new Color(r.nextInt(256), r.nextInt(256), r.nextInt(256));
		repaint();
	}
	
	public void changeScreen(){
		Random r=new Random();
		screenColor=new Color(r.nextInt(256), r.nextInt(256), r.nextInt(256));
		setBackground(screenColor);
		repaint();
	}*/
	
	//this is a short cut method for enabling or disabling all radios at the same time   
	public void setRadiosAble(boolean a){
		rl.setEnabled(a);
		ud.setEnabled(a);
		rn.setEnabled(a);
		up.setEnabled(!a);
		down.setEnabled(!a);
		right.setEnabled(!a);
		left.setEnabled(!a);
		
	}
	
	//This method is for stopping the movement
	public void stopIt(){
		try{
			
			t.interrupt();
			start.setEnabled(true);
			setRadiosAble(true);
			//speeds should be initialized again the system start over 
			speedX=5;
			speedY=5;
			
			
		}catch(Exception e1){
			
		}
	}
	
    //When continuous random movements are started others should be enabled   
	public void startIt(){
		try{
			
			if(rl.isSelected()){
				ud.setEnabled(false);
				rn.setEnabled(false);
				t=new Thread(moveRightLeft);
				t.start();
			}else if(ud.isSelected()){
				rl.setEnabled(false);
				rn.setEnabled(false);
				t=new Thread(moveUpDown);
				t.start();
			}else if(rn.isSelected()){
				rl.setEnabled(false);
				ud.setEnabled(false);
			    t=new Thread(moveRandom);
				t.start();
			}
			start.setEnabled(false); 
			}
			
		
		catch(Exception e1){
			
		}			
	}

	//These are moving methods for arrow buttons 
	Runnable moveRight=new Runnable(){
		public void run(){			
			if(x+radius < layoutX){
				  x +=speedX;
				  repaint();
			  
				}
				 else {
				 x=880;//it is equal to difference of layout length and panel length
				 repaint();
					
				}		
		}
	};
	

	Runnable moveLeft= new Runnable(){
		public void run(){
			if(x>0){
				  x-=speedX;
				  repaint();
				
				}
				else{
					locationX=radius;
					repaint();
	
				}
		}
	};
	
	Runnable moveUp= new Runnable(){
		public void run(){
			if(y>25){				
				y-=speedY;
				repaint();
			
				}
				else{
					locationY=radius+25;
					repaint();
					
				}
		}	
	};
	
	Runnable moveDown= new Runnable(){
	    public void run(){
	    	if(y<400){
	    		y+=speedY;
	    		repaint();
	    		}
	    		else{
	    			locationY=400;//it is equal to difference of layout length and panel length
	    			repaint();
	    		}
	    }		
	};
	
	//These are moving methods for continuous radio buttons
	Runnable moveRightLeft= new Runnable(){
		public void run(){
			while(true){
				x+=speedX;
				repaint();
				if(x<=0 || x+radius>layoutX){
					speedX=-speedX;
				}
				try{
					Thread.sleep(20);
				}catch(Exception e){
					break;
				}
			}
		}
	};
	
	Runnable moveUpDown= new Runnable(){
		public void run(){
			while(true){
				y-=speedY;
				repaint();
				if(y<=25 || y>400){
					speedY=-speedY;
				}
				try{
					Thread.sleep(20);;				
				}catch(Exception e){
					break;
				}
			}
			
		}
	};
	
	Runnable moveRandom = new Runnable(){ // moveRandom method is created to solve problem of opposite direction
		public void run(){
			while(true){
				y+=speedY;
				x+=speedX;
				repaint();
				if(y<=25 || y>400){
					speedY=-speedY;
				}else if(x<=0 || x+radius>layoutX){
					speedX=-speedX;
				}
				try{
					Thread.sleep(20);
				}catch(Exception e){
					break;
				}
			}
		}
	};
	

	

	public static void main(String[] args) {
        JFrame ballFrame=new JFrame("Let Me Move");
		
		MovingBallMachine mbm=new MovingBallMachine();
		
		ballFrame.add(mbm);
		ballFrame.setSize(980,680);
		ballFrame.setResizable(false);
	    ballFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    ballFrame.setVisible(true);
	    
	    
	}

	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if(e.getSource()==right){
			t = new Thread(moveRight);
			t.start();
		}else if(e.getSource()==left){
			t = new Thread(moveLeft);
			t.start();
		}else if(e.getSource()==up){
			t = new Thread(moveUp);
			t.start();
		}else if(e.getSource()==down){
			t=new Thread(moveDown);
			t.start();
		}else if(e.getSource()==rl){
			t= new Thread(moveRightLeft);
			t.start();
		}else if(e.getSource()==rn){
			t=new Thread(moveRandom);
			t.start();
		}else if(e.getSource()==start){
		    startIt();
		}else if(e.getSource()==stop){
			stopIt();
		
		}
		
	}
	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub
		
		if(am.isSelected()){			
			setRadiosAble(true);
			start.setEnabled(true);
		}else{
			stopIt();
			setRadiosAble(false);
			start.setEnabled(false);
		}
	}
	
	


		
	
	
}


